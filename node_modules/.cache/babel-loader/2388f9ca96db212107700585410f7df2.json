{"ast":null,"code":"import { __rest, __assign } from './_virtual/_tslib.js';\nimport * as React from 'react';\nimport MuiAutocomplete from '@mui/material/Autocomplete';\nimport invariant from 'tiny-warning';\n\nfunction fieldToAutocomplete(_a) {\n  var disabled = _a.disabled,\n      field = _a.field,\n      _b = _a.form,\n      isSubmitting = _b.isSubmitting,\n      setFieldValue = _b.setFieldValue;\n  _a.type;\n\n  var onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      freeSolo = _a.freeSolo,\n      props = __rest(_a, [\"disabled\", \"field\", \"form\", \"type\", \"onChange\", \"onBlur\", \"freeSolo\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.multiple) {\n      invariant(Array.isArray(field.value), \"value for \" + field.name + \" is not an array, this can caused unexpected behaviour\");\n    }\n  }\n\n  field.onChange;\n  field.onBlur;\n  field.multiple;\n\n  var fieldSubselection = __rest(field, [\"onChange\", \"onBlur\", \"multiple\"]);\n\n  return __assign(__assign({\n    freeSolo: freeSolo,\n    onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (event) {\n      field.onBlur(event !== null && event !== void 0 ? event : field.name);\n    },\n    onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, value) {\n      setFieldValue(field.name, value);\n    },\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting,\n    loading: isSubmitting\n  }, fieldSubselection), props);\n}\n\nfunction Autocomplete(props) {\n  return React.createElement(MuiAutocomplete, __assign({}, fieldToAutocomplete(props)));\n}\n\nAutocomplete.displayName = 'FormikMaterialUIAutocomplete';\nexport { Autocomplete, fieldToAutocomplete };","map":{"version":3,"sources":["D:\\All - Projects\\PROJECTS - Gitkraken\\Project-9 - capsit\\capsit\\node_modules\\formik-material-ui\\src\\Autocomplete.tsx"],"names":[],"mappings":";;;;;SAsBgB,mB,CAKd,E,EAcD;MAbC,QAAQ,GAAA,EAAA,CAAA,Q;MACR,KAAK,GAAA,EAAA,CAAA,K;MACL,EAAA,GAAA,EAAA,CAAA,I;MAAQ,YAAY,GAAA,EAAA,CAAA,Y;MAAE,aAAa,GAAA,EAAA,CAAA,a;AAAA,EAAA,EAAA,CAAA,IAAA;;AAC/B,MACJ,QAAQ,GAAA,EAAA,CAAA,QADJ;AAAA,MAEJ,MAAM,GAAA,EAAA,CAAA,MAFF;AAAA,MAGJ,QAAQ,GAAA,EAAA,CAAA,QAHJ;AAAA,MAID,KAAK,GAAA,MAAA,CAAA,EAAA,EARR,CAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAA,UAAA,CAQQ,CAJJ;;AAWJ,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,KAAK,CAAC,QAAV,EAAoB;AAClB,MAAA,SAAS,CACP,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,KAApB,CADO,EAEP,eAAa,KAAK,CAAC,IAAnB,GAAuB,wDAFhB,CAAT;AAID;AACF;;AAOG,EAAA,KAAK,CAJY,QAIjB;AAAA,EAAA,KAAK,CAHQ,MAGb;AAAA,EAAA,KAAK,CAFY,QAEjB;;AAFiB,MAChB,iBAAiB,GAAA,MAAA,CAClB,KADkB,EAJhB,CAAA,UAAA,EAAA,QAAA,EAAA,UAAA,CAIgB,CADD;;AAIrB,SAAA,QAAA,CAAA,QAAA,CAAA;AACE,IAAA,QAAQ,EAAA,QADV;AAEE,IAAA,MAAM,EACJ,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GACA,UAAU,KAAV,EAAe;AACb,MAAA,KAAK,CAAC,MAAN,CAAa,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,GAAS,KAAK,CAAC,IAA5B;AACD,KANL;AAOE,IAAA,QAAQ,EACN,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAA,QAAA,GACA,UAAU,MAAV,EAAkB,KAAlB,EAAuB;AACrB,MAAA,aAAa,CAAC,KAAK,CAAC,IAAP,EAAa,KAAb,CAAb;AACD,KAXL;AAYE,IAAA,QAAQ,EAAE,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAA,QAAA,GAAY,YAZxB;AAaE,IAAA,OAAO,EAAE;AAbX,GAAA,EAcK,iBAdL,CAAA,EAeK,KAfL,CAAA;AAiBD;;SAEe,Y,CAKd,K,EAAiE;AACjE,SAAO,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,QAAA,CAAA,EAAA,EAAK,mBAAmB,CAAC,KAAD,CAAxB,CAAhB,CAAP;AACD;;AAED,YAAY,CAAC,WAAb,GAA2B,8BAA3B","sourcesContent":["import * as React from 'react';\nimport MuiAutocomplete, {\n  AutocompleteProps as MuiAutocompleteProps,\n} from '@mui/material/Autocomplete';\nimport { FieldProps } from 'formik';\nimport invariant from 'tiny-warning';\n\nexport { AutocompleteRenderInputParams } from '@mui/material/Autocomplete';\n\nexport interface AutocompleteProps<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n> extends FieldProps,\n    Omit<\n      MuiAutocompleteProps<T, Multiple, DisableClearable, FreeSolo>,\n      'name' | 'value' | 'defaultValue'\n    > {\n  type?: string;\n}\n\nexport function fieldToAutocomplete<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n>({\n  disabled,\n  field,\n  form: { isSubmitting, setFieldValue },\n  type,\n  onChange,\n  onBlur,\n  freeSolo,\n  ...props\n}: AutocompleteProps<\n  T,\n  Multiple,\n  DisableClearable,\n  FreeSolo\n>): MuiAutocompleteProps<T, Multiple, DisableClearable, FreeSolo> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.multiple) {\n      invariant(\n        Array.isArray(field.value),\n        `value for ${field.name} is not an array, this can caused unexpected behaviour`\n      );\n    }\n  }\n\n  const {\n    onChange: _onChange,\n    onBlur: _onBlur,\n    multiple: _multiple,\n    ...fieldSubselection\n  } = field;\n\n  return {\n    freeSolo,\n    onBlur:\n      onBlur ??\n      function (event) {\n        field.onBlur(event ?? field.name);\n      },\n    onChange:\n      onChange ??\n      function (_event, value) {\n        setFieldValue(field.name, value);\n      },\n    disabled: disabled ?? isSubmitting,\n    loading: isSubmitting,\n    ...fieldSubselection,\n    ...props,\n  };\n}\n\nexport function Autocomplete<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n>(props: AutocompleteProps<T, Multiple, DisableClearable, FreeSolo>) {\n  return <MuiAutocomplete {...fieldToAutocomplete(props)} />;\n}\n\nAutocomplete.displayName = 'FormikMaterialUIAutocomplete';\n"]},"metadata":{},"sourceType":"module"}