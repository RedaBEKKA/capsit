{"ast":null,"code":"var _jsxFileName = \"D:\\\\All - Projects\\\\PROJECTS - Gitkraken\\\\Project-9 - capsit\\\\capsit\\\\src\\\\pages\\\\auth\\\\newPassword\\\\NewPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport logo from \"../../../assets/logo.png\";\nimport * as actions from '../../../store/action-creators/index';\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from 'react-router-dom';\nimport classes from './newPassword.module.scss';\nimport { Formik, Form, Field } from \"formik\";\nimport { TextField } from \"formik-material-ui\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewPassword = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation(['login']); //Data\n\n  const initialValues = {\n    password: \"\",\n    confirmPassword: \"\"\n  };\n  const [state, setState] = useState(initialValues); //password validation\n\n  const lowercaseRegEx = /(?=.*[a-z])/;\n  const uppercaseRegEx = /(?=.*[A-Z])/;\n  const numericRegEx = /(?=.*[0-9])/;\n  const lengthRegEx = /(?=.{8,})/;\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\n  const p = document.querySelector('p'); //validation schema\n\n  let validationSchema = Yup.object().shape({\n    password: Yup.string().min(8, 'Password is too short - should be 8 chars minimum.').matches(lowercaseRegEx, \"Must contain one lowercase alphabetical character!\").matches(uppercaseRegEx, \"Must contain one uppercase alphabetical character!\").matches(numericRegEx, \"Must contain one numeric character!\").matches(lengthRegEx, \"Must contain at least 8 characters!\").matches(specialsRegEx, \"Must contain one special caracter\").required(\"Password is required\"),\n    confirmPassword: Yup.string().required(\"Confirm password is required\").oneOf([Yup.ref('password')], 'Passwords does not match')\n  }); // const testedResult = validationSchema.password;\n  // const createPasswordLabel = () => {\n  //   let score = 0\n  //   let regexPositive = [\"[A-Z]\",\"[a-z]\",\"[0-9]\",\"\\\\W\",]\n  //   regexPositive.forEach((regex, index) => {\n  //     if (new RegExp(regex).test(testedResult)) {\n  //       score +=1\n  //     }\n  //   })\n  //   switch (score) {\n  //     case 0:\n  //       return ({\n  //         value: 0,\n  //         info: \"\",\n  //       });\n  //     case 1:\n  //       return ({\n  //         value: 1,\n  //         info: \"Weak\",\n  //       });\n  //     case 2:\n  //       return ({\n  //         value: 2,\n  //         info: \"Fair\",\n  //       });\n  //     case 3:\n  //       return ({\n  //         value: 3,\n  //         info: \"Good\",\n  //       });\n  //     case 4:\n  //       return ({\n  //         value: 4,\n  //         info: \"Strong\",\n  //       });\n  //     default:\n  //       return null\n  //   }\n  // }\n  // const validate=(values)=>{\n  // }\n\n  let dispatch = useDispatch();\n  let navigate = useNavigate();\n\n  const onSubmit = values => {\n    console.log(values, ' values');\n    dispatch(actions.newPassword(values, navigate));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.newPass_login,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.newPass_container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.newPass_logo,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"logo\",\n          style: {\n            width: \"270px\",\n            height: \"152px\",\n            marginTop: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.newPass_form,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.newPass_title,\n          children: t('titleNewPassword')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.newPass_enter_Password,\n          children: t('textNewPassword')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.newPass_reset_Password,\n          children: t('textNewPasswordDetails')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: state,\n          validationSchema: validationSchema,\n          onSubmit: values => onSubmit(values),\n          children: _ref => {\n            let {\n              values\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              className: \"\",\n              autoComplete: \"on\",\n              style: {\n                margin: 40\n              },\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                className: classes.textField,\n                variant: \"standard\",\n                id: \"password\",\n                label: t('password'),\n                name: \"password\",\n                value: values.password,\n                type: \"password\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.newPass_text_security,\n                children: [t('securityOfPassword'), values.password.length >= 8 ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: 'green'\n                  },\n                  children: \"Fort\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: 'red'\n                  },\n                  children: \"Faible\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 20\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: classes.textField,\n                variant: \"standard\",\n                id: \"confirmPassword\",\n                label: t('confirmPassword'),\n                name: \"confirmPassword\",\n                value: values.confirmPassword,\n                type: \"password\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: classes.newPass_button,\n                variant: \"outlined\",\n                type: \"submit\",\n                children: t('register')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 7\n  }, this);\n};\n\n_s(NewPassword, \"EYv73KDeYd665TE5lWsGM/Idk1Y=\", false, function () {\n  return [useTranslation, useDispatch, useNavigate];\n});\n\n_c = NewPassword;\nexport default NewPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPassword\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-9 - capsit/capsit/src/pages/auth/newPassword/NewPassword.js"],"names":["React","useState","Button","logo","actions","useDispatch","useTranslation","useNavigate","classes","Formik","Form","Field","TextField","Yup","NewPassword","t","initialValues","password","confirmPassword","state","setState","lowercaseRegEx","uppercaseRegEx","numericRegEx","lengthRegEx","specialsRegEx","p","document","querySelector","validationSchema","object","shape","string","min","matches","required","oneOf","ref","dispatch","navigate","onSubmit","values","console","log","newPassword","newPass_login","newPass_container","newPass_logo","width","height","marginTop","newPass_form","newPass_title","newPass_enter_Password","newPass_reset_Password","margin","textField","newPass_text_security","length","color","newPass_button"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAsB,eAAtB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAO,KAAKC,OAAZ,MAAyB,sCAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,MAAT,EAAgBC,IAAhB,EAAsBC,KAAtB,QAAkC,QAAlC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAExB,QAAM;AAAEC,IAAAA;AAAF,MAAQT,cAAc,CAAC,CAAC,OAAD,CAAD,CAA5B,CAFwB,CAIxB;;AACA,QAAMU,aAAa,GAAG;AACpBC,IAAAA,QAAQ,EAAE,EADU;AAEpBC,IAAAA,eAAe,EAAE;AAFG,GAAtB;AAMA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAACe,aAAD,CAAlC,CAXwB,CAaxB;;AACA,QAAMK,cAAc,GAAG,aAAvB;AACA,QAAMC,cAAc,GAAG,aAAvB;AACA,QAAMC,YAAY,GAAG,aAArB;AACA,QAAMC,WAAW,GAAG,WAApB;AACA,QAAMC,aAAa,GAAG,gBAAtB;AACA,QAAMC,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAV,CAnBwB,CAqBxB;;AACA,MAAIC,gBAAgB,GAAGhB,GAAG,CAACiB,MAAJ,GAAaC,KAAb,CAAmB;AAExCd,IAAAA,QAAQ,EAAEJ,GAAG,CAACmB,MAAJ,GACTC,GADS,CACL,CADK,EACF,oDADE,EAGPC,OAHO,CAINb,cAJM,EAKN,oDALM,EAOPa,OAPO,CAQNZ,cARM,EASN,oDATM,EAWPY,OAXO,CAWCX,YAXD,EAWe,qCAXf,EAYPW,OAZO,CAYCV,WAZD,EAYc,qCAZd,EAaPU,OAbO,CAaCT,aAbD,EAae,mCAbf,EAcPU,QAdO,CAcE,sBAdF,CAF8B;AAkBxCjB,IAAAA,eAAe,EAAEL,GAAG,CAACmB,MAAJ,GACdG,QADc,CACL,8BADK,EAEdC,KAFc,CAER,CAACvB,GAAG,CAACwB,GAAJ,CAAQ,UAAR,CAAD,CAFQ,EAEe,0BAFf;AAlBuB,GAAnB,CAAvB,CAtBwB,CA4CxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;AAGE,MAAIC,QAAQ,GAACjC,WAAW,EAAxB;AACA,MAAIkC,QAAQ,GAAGhC,WAAW,EAA1B;;AACA,QAAMiC,QAAQ,GAAGC,MAAD,IAAY;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAmB,SAAnB;AACDH,IAAAA,QAAQ,CAAClC,OAAO,CAACwC,WAAR,CAAoBH,MAApB,EAA2BF,QAA3B,CAAD,CAAR;AACA,GAHD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAE/B,OAAO,CAACqC,aAAxB;AAAA,2BAGA;AAAK,MAAA,SAAS,EAAErC,OAAO,CAACsC,iBAAxB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEtC,OAAO,CAACuC,YAAxB;AAAA,+BACE;AACE,UAAA,GAAG,EAAE5C,IADP;AAEE,UAAA,GAAG,EAAC,MAFN;AAGE,UAAA,KAAK,EAAE;AAAE6C,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,MAAM,EAAE,OAA1B;AAAmCC,YAAAA,SAAS,EAAE;AAA9C;AAHT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAK,QAAA,SAAS,EAAE1C,OAAO,CAAC2C,YAAxB;AAAA,gCAEE;AAAK,UAAA,SAAS,EAAE3C,OAAO,CAAC4C,aAAxB;AAAA,oBACGrC,CAAC,CAAC,kBAAD;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFF,eAME;AAAK,UAAA,SAAS,EAAEP,OAAO,CAAC6C,sBAAxB;AAAA,oBAAkDtC,CAAC,CAAC,iBAAD;AAAnD;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE;AAAK,UAAA,SAAS,EAAEP,OAAO,CAAC8C,sBAAxB;AAAA,oBAAiDvC,CAAC,CAAC,wBAAD;AAAlD;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE,QAAC,MAAD;AACE,UAAA,aAAa,EAAEI,KADjB;AAEE,UAAA,gBAAgB,EAAEU,gBAFpB;AAGE,UAAA,QAAQ,EAAGY,MAAD,IAAWD,QAAQ,CAACC,MAAD,CAH/B;AAAA,oBAKE,QAAe;AAAA,gBAAd;AAAEA,cAAAA;AAAF,aAAc;AAEb,gCACA,QAAC,IAAD;AAAM,cAAA,SAAS,EAAC,EAAhB;AAAmB,cAAA,YAAY,EAAC,IAAhC;AAAqC,cAAA,KAAK,EAAE;AAACc,gBAAAA,MAAM,EAAC;AAAR,eAA5C;AAAA,sCACE,QAAC,KAAD;AACE,gBAAA,SAAS,EAAE/C,OAAO,CAACgD,SADrB;AAEE,gBAAA,OAAO,EAAC,UAFV;AAGE,gBAAA,EAAE,EAAC,UAHL;AAIE,gBAAA,KAAK,EAAGzC,CAAC,CAAC,UAAD,CAJX;AAKE,gBAAA,IAAI,EAAC,UALP;AAME,gBAAA,KAAK,EAAE0B,MAAM,CAACxB,QANhB;AAOE,gBAAA,IAAI,EAAC,UAPP;AAQE,gBAAA,SAAS,EAAEL;AARb;AAAA;AAAA;AAAA;AAAA,sBADF,eAYE;AAAK,gBAAA,SAAS,EAAEJ,OAAO,CAACiD,qBAAxB;AAAA,2BACC1C,CAAC,CAAC,oBAAD,CADF,EAEE0B,MAAM,CAACxB,QAAP,CAAgByC,MAAjB,IAA0B,CAA1B,gBACG;AAAM,kBAAA,KAAK,EAAE;AAACC,oBAAAA,KAAK,EAAE;AAAR,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADH,gBAIE;AAAM,kBAAA,KAAK,EAAE;AAACA,oBAAAA,KAAK,EAAE;AAAR,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANH;AAAA;AAAA;AAAA;AAAA;AAAA,sBAZF,eAoBE,QAAC,KAAD;AACE,gBAAA,SAAS,EAAEnD,OAAO,CAACgD,SADrB;AAEE,gBAAA,OAAO,EAAC,UAFV;AAGE,gBAAA,EAAE,EAAC,iBAHL;AAIE,gBAAA,KAAK,EAAEzC,CAAC,CAAC,iBAAD,CAJV;AAKE,gBAAA,IAAI,EAAC,iBALP;AAME,gBAAA,KAAK,EAAE0B,MAAM,CAACvB,eANhB;AAOE,gBAAA,IAAI,EAAC,UAPP;AAQE,gBAAA,SAAS,EAAEN;AARb;AAAA;AAAA;AAAA;AAAA,sBApBF,eA8BE;AAAA;AAAA;AAAA;AAAA,sBA9BF,eA+BE,QAAC,MAAD;AACE,gBAAA,SAAS,EAAEJ,OAAO,CAACoD,cADrB;AAEE,gBAAA,OAAO,EAAC,UAFV;AAGE,gBAAA,IAAI,EAAC,QAHP;AAAA,0BAKG7C,CAAC,CAAC,UAAD;AALJ;AAAA;AAAA;AAAA;AAAA,sBA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA;AA0CC;AAjDL;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA,UADF;AA6EH,CA7KD;;GAAMD,W;UAEUR,c,EAwFCD,W,EACEE,W;;;KA3FbO,W;AA+KN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button} from \"@mui/material\";\r\nimport logo from \"../../../assets/logo.png\";\r\nimport * as actions from '../../../store/action-creators/index';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useNavigate } from 'react-router-dom'\r\nimport classes from './newPassword.module.scss'\r\nimport { Formik,Form, Field} from \"formik\";\r\nimport { TextField } from \"formik-material-ui\"\r\nimport * as Yup from \"yup\"\r\nconst NewPassword = () => {\r\n\r\n  const { t } = useTranslation(['login'])\r\n\r\n  //Data\r\n  const initialValues = {\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    \r\n  }\r\n\r\n  const [state, setState] = useState(initialValues);\r\n  \r\n  //password validation\r\n  const lowercaseRegEx = /(?=.*[a-z])/\r\n  const uppercaseRegEx = /(?=.*[A-Z])/\r\n  const numericRegEx = /(?=.*[0-9])/\r\n  const lengthRegEx = /(?=.{8,})/\r\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\r\n  const p = document.querySelector('p');\r\n\r\n  //validation schema\r\n  let validationSchema = Yup.object().shape({\r\n\r\n    password: Yup.string()\r\n    .min(8, 'Password is too short - should be 8 chars minimum.')\r\n  \r\n      .matches(\r\n        lowercaseRegEx,\r\n        \"Must contain one lowercase alphabetical character!\"\r\n      )\r\n      .matches(\r\n        uppercaseRegEx,\r\n        \"Must contain one uppercase alphabetical character!\"\r\n      )\r\n      .matches(numericRegEx, \"Must contain one numeric character!\")\r\n      .matches(lengthRegEx, \"Must contain at least 8 characters!\")\r\n      .matches(specialsRegEx,\"Must contain one special caracter\")\r\n      .required(\"Password is required\"),\r\n  \r\n    confirmPassword: Yup.string()\r\n      .required(\"Confirm password is required\")\r\n      .oneOf([Yup.ref('password')], 'Passwords does not match'),\r\n  })\r\n  // const testedResult = validationSchema.password;\r\n  // const createPasswordLabel = () => {\r\n  //   let score = 0\r\n  //   let regexPositive = [\"[A-Z]\",\"[a-z]\",\"[0-9]\",\"\\\\W\",]\r\n  //   regexPositive.forEach((regex, index) => {\r\n  //     if (new RegExp(regex).test(testedResult)) {\r\n  //       score +=1\r\n  //     }\r\n  //   })\r\n  //   switch (score) {\r\n  //     case 0:\r\n  //       return ({\r\n  //         value: 0,\r\n  //         info: \"\",\r\n  //       });\r\n  //     case 1:\r\n  //       return ({\r\n  //         value: 1,\r\n  //         info: \"Weak\",\r\n  //       });\r\n  //     case 2:\r\n  //       return ({\r\n  //         value: 2,\r\n  //         info: \"Fair\",\r\n  //       });\r\n  //     case 3:\r\n  //       return ({\r\n  //         value: 3,\r\n  //         info: \"Good\",\r\n  //       });\r\n  //     case 4:\r\n  //       return ({\r\n  //         value: 4,\r\n  //         info: \"Strong\",\r\n  //       });\r\n  //     default:\r\n  //       return null\r\n  //   }\r\n    \r\n  // }\r\n  \r\n  // const validate=(values)=>{\r\n\r\n  // }\r\n  \r\n\r\n    let dispatch=useDispatch()\r\n    let navigate = useNavigate()\r\n    const onSubmit= (values) => {\r\n      console.log(values,' values')\r\n     dispatch(actions.newPassword(values,navigate))\r\n    }\r\n    return (\r\n      <div className={classes.newPass_login}>\r\n      \r\n      \r\n      <div className={classes.newPass_container}>\r\n        <div className={classes.newPass_logo}>\r\n          <img\r\n            src={logo}\r\n            alt=\"logo\"\r\n            style={{ width: \"270px\", height: \"152px\", marginTop: \"5px\" }}\r\n          />\r\n        </div>\r\n        <div className={classes.newPass_form}>\r\n        \r\n          <div className={classes.newPass_title}>\r\n            {t('titleNewPassword')}\r\n          </div>\r\n\r\n          <div className={classes.newPass_enter_Password} >{t('textNewPassword')}</div>\r\n          <div className={classes.newPass_reset_Password}>{t('textNewPasswordDetails')}</div>\r\n          <Formik \r\n            initialValues={state}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values) =>onSubmit(values)}\r\n          >\r\n           {({ values}) => {\r\n           \r\n              return (\r\n              <Form className='' autoComplete=\"on\" style={{margin:40}}>\r\n                <Field\r\n                  className={classes.textField}\r\n                  variant=\"standard\"\r\n                  id=\"password\"\r\n                  label= {t('password')}\r\n                  name=\"password\"\r\n                  value={values.password}\r\n                  type=\"password\"\r\n                  component={TextField}\r\n                  \r\n                  />\r\n                <div className={classes.newPass_text_security}>\r\n                {t('securityOfPassword')} \r\n                {(values.password.length)>=8 ?\r\n                  ( <span style={{color: 'green'}}>Fort</span>)\r\n                \r\n              \r\n                :  <span style={{color: 'red'}}>Faible</span>}\r\n                </div>\r\n                <Field\r\n                  className={classes.textField}\r\n                  variant=\"standard\"\r\n                  id=\"confirmPassword\"\r\n                  label={t('confirmPassword')}\r\n                  name=\"confirmPassword\"\r\n                  value={values.confirmPassword}\r\n                  type=\"password\"\r\n                  component={TextField}\r\n                  />\r\n                <br/>\r\n                <Button\r\n                  className={classes.newPass_button}\r\n                  variant=\"outlined\"\r\n                  type=\"submit\"\r\n                >\r\n                  {t('register')}\r\n                </Button>\r\n                \r\n              </Form>\r\n              )\r\n              }}\r\n          </Formik>\r\n        </div>\r\n        \r\n      </div>\r\n      \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default NewPassword\r\n"]},"metadata":{},"sourceType":"module"}