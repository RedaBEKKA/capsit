{"ast":null,"code":"var _jsxFileName = \"D:\\\\All - Projects\\\\PROJECTS - Gitkraken\\\\Project-9 - capsit\\\\capsit\\\\src\\\\componenets\\\\table\\\\capsitTable.js\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, TableBody, TableCell, TableContainer, TableRow, Checkbox } from '@mui/material';\nimport { EnhancedTableHead } from './tableHeader/tableHeader';\nimport { TableActions } from './celleType/actions';\nimport { TableDetailButton } from './celleType/detailButton';\nimport { TablePagination } from './tablePagination/tablePagination'; // Table \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function CapsitTable(props) {\n  const {\n    columns,\n    rows,\n    actions,\n    order,\n    orderBy,\n    onSelectedItem,\n    selectedItem,\n    totalItem,\n    pageSize,\n    page,\n    onChangePage\n  } = props;\n\n  const handleSelectAllClick = event => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map(n => n.id);\n      onSelectedItem(newSelecteds);\n      return;\n    }\n\n    onSelectedItem([]);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selectedItem.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selectedItem, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selectedItem.slice(1));\n    } else if (selectedIndex === selectedItem.length - 1) {\n      newSelected = newSelected.concat(selectedItem.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selectedItem.slice(0, selectedIndex), selectedItem.slice(selectedIndex + 1));\n    }\n\n    onSelectedItem(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    onChangePage(newPage);\n  };\n\n  const isSelected = id => selectedItem.indexOf(id) !== -1;\n\n  const renderTableRows = () => {\n    return rows.map((row, rowIndex) => {\n      return /*#__PURE__*/_jsxDEV(TableRow, {\n        hover: true,\n        children: columns.map((col, colIndex) => {\n          var _col$width, _col$align;\n\n          return /*#__PURE__*/_jsxDEV(TableCell, {\n            width: (_col$width = col.width) !== null && _col$width !== void 0 ? _col$width : 100,\n            align: (_col$align = col.align) !== null && _col$align !== void 0 ? _col$align : 'left',\n            padding: \"none\",\n            children: renderColumnByType(row, col)\n          }, colIndex + rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 28\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  const renderColumnByType = (row, headCell) => {\n    const labelId = `enhanced-table-checkbox-${row.id}`;\n    const isItemSelected = isSelected(row.id);\n\n    switch (headCell.type) {\n      case 'checkbox':\n        return /*#__PURE__*/_jsxDEV(Checkbox, {\n          onClick: event => handleClick(event, row.id),\n          color: \"primary\",\n          checked: isItemSelected,\n          inputProps: {\n            'aria-labelledby': labelId\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this);\n\n      case 'action':\n        return /*#__PURE__*/_jsxDEV(TableActions, {\n          actions: actions,\n          rowData: row\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this);\n\n      case 'detail':\n        return /*#__PURE__*/_jsxDEV(TableDetailButton, {\n          actions: actions,\n          rowData: row\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this);\n\n      default:\n        return row[headCell.id];\n    }\n  };\n\n  const numberPages = Math.round(totalItem / pageSize);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 500\n        },\n        \"aria-labelledby\": \"tableTitle\",\n        size: 'medium',\n        children: [/*#__PURE__*/_jsxDEV(EnhancedTableHead, {\n          numSelected: selectedItem.length,\n          order: order,\n          orderBy: orderBy,\n          onSelectAllClick: handleSelectAllClick,\n          onRequestSort: props.onSortColumn,\n          rowCount: rows.length,\n          headCells: columns\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [renderTableRows(), rows.length === 0 && /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 6,\n              children: \"empty data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), totalItem > pageSize ? /*#__PURE__*/_jsxDEV(TablePagination, {\n      totalItem: totalItem,\n      count: numberPages,\n      page: page,\n      handleChangePage: handleChangePage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n}\n_c = CapsitTable;\nCapsitTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  rows: PropTypes.array.isRequired,\n  actions: PropTypes.array.isRequired,\n  onSortColumn: PropTypes.func.isRequired,\n  onSelectedItem: PropTypes.any,\n  selectedItem: PropTypes.array,\n  totalItem: PropTypes.number,\n  page: PropTypes.number,\n  pageSize: PropTypes.number,\n  onPageChange: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CapsitTable\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-9 - capsit/capsit/src/componenets/table/capsitTable.js"],"names":["React","PropTypes","Table","TableBody","TableCell","TableContainer","TableRow","Checkbox","EnhancedTableHead","TableActions","TableDetailButton","TablePagination","CapsitTable","props","columns","rows","actions","order","orderBy","onSelectedItem","selectedItem","totalItem","pageSize","page","onChangePage","handleSelectAllClick","event","target","checked","newSelecteds","map","n","id","handleClick","name","selectedIndex","indexOf","newSelected","concat","slice","length","handleChangePage","newPage","isSelected","renderTableRows","row","rowIndex","col","colIndex","width","align","renderColumnByType","headCell","labelId","isItemSelected","type","numberPages","Math","round","minWidth","onSortColumn","propTypes","array","isRequired","func","any","number","onPageChange"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,cAAtC,EAAsDC,QAAtD,EAAiEC,QAAjE,QAAiF,eAAjF;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,eAAT,QAAgC,mCAAhC,C,CAEA;;;;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC/B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,OAAjC;AAA0CC,IAAAA,cAA1C;AAA0DC,IAAAA,YAA1D;AACFC,IAAAA,SADE;AACSC,IAAAA,QADT;AACmBC,IAAAA,IADnB;AACyBC,IAAAA;AADzB,MAC0CX,KADhD;;AAIA,QAAMY,oBAAoB,GAAIC,KAAD,IAAW;AACpC,QAAIA,KAAK,CAACC,MAAN,CAAaC,OAAjB,EAA0B;AACtB,YAAMC,YAAY,GAAGd,IAAI,CAACe,GAAL,CAAUC,CAAD,IAAOA,CAAC,CAACC,EAAlB,CAArB;AACAb,MAAAA,cAAc,CAACU,YAAD,CAAd;AACA;AACH;;AACDV,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH,GAPD;;AASA,QAAMc,WAAW,GAAG,CAACP,KAAD,EAAQQ,IAAR,KAAiB;AACjC,UAAMC,aAAa,GAAGf,YAAY,CAACgB,OAAb,CAAqBF,IAArB,CAAtB;AACA,QAAIG,WAAW,GAAG,EAAlB;;AAEA,QAAIF,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACtBE,MAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBlB,YAAnB,EAAiCc,IAAjC,CAAd;AACH,KAFD,MAEO,IAAIC,aAAa,KAAK,CAAtB,EAAyB;AAC5BE,MAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBlB,YAAY,CAACmB,KAAb,CAAmB,CAAnB,CAAnB,CAAd;AACH,KAFM,MAEA,IAAIJ,aAAa,KAAKf,YAAY,CAACoB,MAAb,GAAsB,CAA5C,EAA+C;AAClDH,MAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBlB,YAAY,CAACmB,KAAb,CAAmB,CAAnB,EAAsB,CAAC,CAAvB,CAAnB,CAAd;AACH,KAFM,MAEA,IAAIJ,aAAa,GAAG,CAApB,EAAuB;AAC1BE,MAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CACVlB,YAAY,CAACmB,KAAb,CAAmB,CAAnB,EAAsBJ,aAAtB,CADU,EAEVf,YAAY,CAACmB,KAAb,CAAmBJ,aAAa,GAAG,CAAnC,CAFU,CAAd;AAIH;;AAEDhB,IAAAA,cAAc,CAACkB,WAAD,CAAd;AACH,GAlBD;;AAoBA,QAAMI,gBAAgB,GAAG,CAACf,KAAD,EAAQgB,OAAR,KAAoB;AACzClB,IAAAA,YAAY,CAACkB,OAAD,CAAZ;AACH,GAFD;;AAKA,QAAMC,UAAU,GAAIX,EAAD,IAAQZ,YAAY,CAACgB,OAAb,CAAqBJ,EAArB,MAA6B,CAAC,CAAzD;;AAEA,QAAMY,eAAe,GAAG,MAAM;AAC1B,WAAO7B,IAAI,CAACe,GAAL,CAAS,CAACe,GAAD,EAAMC,QAAN,KAAmB;AAC/B,0BAAO,QAAC,QAAD;AAEH,QAAA,KAAK,MAFF;AAAA,kBAIFhC,OAAO,CAACgB,GAAR,CAAY,CAACiB,GAAD,EAAMC,QAAN,KAAmB;AAAA;;AAE5B,8BAAO,QAAC,SAAD;AAAW,YAAA,KAAK,gBAAED,GAAG,CAACE,KAAN,mDAAe,GAA/B;AAAoC,YAAA,KAAK,gBAAEF,GAAG,CAACG,KAAN,mDAAe,MAAxD;AAAgE,YAAA,OAAO,EAAC,MAAxE;AAAA,sBACFC,kBAAkB,CAACN,GAAD,EAAME,GAAN;AADhB,aAAoFC,QAAQ,GAAGF,QAA/F;AAAA;AAAA;AAAA;AAAA,kBAAP;AAIH,SANA;AAJE,SACEA,QADF;AAAA;AAAA;AAAA;AAAA,cAAP;AAaH,KAdM,CAAP;AAeH,GAhBD;;AAiBA,QAAMK,kBAAkB,GAAG,CAACN,GAAD,EAAMO,QAAN,KAAmB;AAC1C,UAAMC,OAAO,GAAI,2BAA0BR,GAAG,CAACb,EAAG,EAAlD;AACA,UAAMsB,cAAc,GAAGX,UAAU,CAACE,GAAG,CAACb,EAAL,CAAjC;;AACA,YAAQoB,QAAQ,CAACG,IAAjB;AACI,WAAK,UAAL;AAAiB,4BACb,QAAC,QAAD;AACI,UAAA,OAAO,EAAG7B,KAAD,IAAWO,WAAW,CAACP,KAAD,EAAQmB,GAAG,CAACb,EAAZ,CADnC;AAEI,UAAA,KAAK,EAAC,SAFV;AAGI,UAAA,OAAO,EAAEsB,cAHb;AAII,UAAA,UAAU,EAAE;AACR,+BAAmBD;AADX;AAJhB;AAAA;AAAA;AAAA;AAAA,gBADa;;AAUjB,WAAK,QAAL;AAAe,4BACX,QAAC,YAAD;AAAc,UAAA,OAAO,EAAErC,OAAvB;AAAgC,UAAA,OAAO,EAAE6B;AAAzC;AAAA;AAAA;AAAA;AAAA,gBADW;;AAGf,WAAK,QAAL;AAAe,4BACX,QAAC,iBAAD;AAAmB,UAAA,OAAO,EAAE7B,OAA5B;AAAqC,UAAA,OAAO,EAAE6B;AAA9C;AAAA;AAAA;AAAA;AAAA,gBADW;;AAIf;AAAS,eAAOA,GAAG,CAACO,QAAQ,CAACpB,EAAV,CAAV;AAlBb;AAsBH,GAzBD;;AA2BA,QAAMwB,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWrC,SAAS,GAAGC,QAAvB,CAApB;AAGA,sBACI;AAAA,4BACI,QAAC,cAAD;AAAA,6BACI,QAAC,KAAD;AACI,QAAA,EAAE,EAAE;AAAEqC,UAAAA,QAAQ,EAAE;AAAZ,SADR;AAEI,2BAAgB,YAFpB;AAGI,QAAA,IAAI,EAAE,QAHV;AAAA,gCAKI,QAAC,iBAAD;AACI,UAAA,WAAW,EAAEvC,YAAY,CAACoB,MAD9B;AAEI,UAAA,KAAK,EAAEvB,KAFX;AAGI,UAAA,OAAO,EAAEC,OAHb;AAII,UAAA,gBAAgB,EAAEO,oBAJtB;AAKI,UAAA,aAAa,EAAEZ,KAAK,CAAC+C,YALzB;AAMI,UAAA,QAAQ,EAAE7C,IAAI,CAACyB,MANnB;AAOI,UAAA,SAAS,EAAE1B;AAPf;AAAA;AAAA;AAAA;AAAA,gBALJ,eAcI,QAAC,SAAD;AAAA,qBAIQ8B,eAAe,EAJvB,EAMK7B,IAAI,CAACyB,MAAL,KAAgB,CAAhB,iBACG,QAAC,QAAD;AAAA,mCAEI,QAAC,SAAD;AAAW,cAAA,OAAO,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,kBAPR;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAkCKnB,SAAS,GAAGC,QAAZ,gBACG,QAAE,eAAF;AACI,MAAA,SAAS,EAAED,SADf;AAEI,MAAA,KAAK,EAAEmC,WAFX;AAGI,MAAA,IAAI,EAAEjC,IAHV;AAII,MAAA,gBAAgB,EAAEkB;AAJtB;AAAA;AAAA;AAAA;AAAA,YADH,GAMQ,IAxCb;AAAA,kBADJ;AA8CH;KAtIe7B,W;AAuIhBA,WAAW,CAACiD,SAAZ,GAAwB;AAEpB/C,EAAAA,OAAO,EAAEb,SAAS,CAAC6D,KAAV,CAAgBC,UAFL;AAGpBhD,EAAAA,IAAI,EAAEd,SAAS,CAAC6D,KAAV,CAAgBC,UAHF;AAIpB/C,EAAAA,OAAO,EAAEf,SAAS,CAAC6D,KAAV,CAAgBC,UAJL;AAKpBH,EAAAA,YAAY,EAAE3D,SAAS,CAAC+D,IAAV,CAAeD,UALT;AAMpB5C,EAAAA,cAAc,EAAElB,SAAS,CAACgE,GANN;AAOpB7C,EAAAA,YAAY,EAAEnB,SAAS,CAAC6D,KAPJ;AAQpBzC,EAAAA,SAAS,EAAEpB,SAAS,CAACiE,MARD;AASpB3C,EAAAA,IAAI,EAAEtB,SAAS,CAACiE,MATI;AAUpB5C,EAAAA,QAAQ,EAAErB,SAAS,CAACiE,MAVA;AAWpBC,EAAAA,YAAY,EAAElE,SAAS,CAAC+D;AAXJ,CAAxB","sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table, TableBody, TableCell, TableContainer, TableRow,  Checkbox } from '@mui/material';\r\nimport { EnhancedTableHead } from './tableHeader/tableHeader'\r\nimport { TableActions } from './celleType/actions'\r\nimport { TableDetailButton } from './celleType/detailButton'\r\nimport { TablePagination } from './tablePagination/tablePagination'\r\n\r\n// Table \r\nexport function CapsitTable(props) {\r\n    const { columns, rows, actions, order, orderBy, onSelectedItem, selectedItem, \r\n        totalItem, pageSize, page, onChangePage } = props;\r\n\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.id);\r\n            onSelectedItem(newSelecteds)\r\n            return;\r\n        }\r\n        onSelectedItem([])\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selectedItem.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selectedItem, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selectedItem.slice(1));\r\n        } else if (selectedIndex === selectedItem.length - 1) {\r\n            newSelected = newSelected.concat(selectedItem.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selectedItem.slice(0, selectedIndex),\r\n                selectedItem.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        onSelectedItem(newSelected)\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        onChangePage(newPage);\r\n    };\r\n\r\n\r\n    const isSelected = (id) => selectedItem.indexOf(id) !== -1;\r\n\r\n    const renderTableRows = () => {\r\n        return rows.map((row, rowIndex) => {\r\n            return <TableRow\r\n                key={rowIndex}\r\n                hover\r\n            >\r\n                {columns.map((col, colIndex) => {\r\n\r\n                    return <TableCell width={col.width ?? 100} align={col.align ?? 'left'} padding=\"none\" key={colIndex + rowIndex} >\r\n                        {renderColumnByType(row, col)}\r\n\r\n                    </TableCell>\r\n                })\r\n                }\r\n            </TableRow>\r\n        })\r\n    }\r\n    const renderColumnByType = (row, headCell) => {\r\n        const labelId = `enhanced-table-checkbox-${row.id}`\r\n        const isItemSelected = isSelected(row.id);\r\n        switch (headCell.type) {\r\n            case 'checkbox': return (\r\n                <Checkbox\r\n                    onClick={(event) => handleClick(event, row.id)}\r\n                    color=\"primary\"\r\n                    checked={isItemSelected}\r\n                    inputProps={{\r\n                        'aria-labelledby': labelId,\r\n                    }}\r\n                />\r\n            )\r\n            case 'action': return (\r\n                <TableActions actions={actions} rowData={row} />\r\n            )\r\n            case 'detail': return (\r\n                <TableDetailButton actions={actions} rowData={row} />\r\n            )\r\n\r\n            default: return row[headCell.id]\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const numberPages = Math.round(totalItem / pageSize)\r\n\r\n\r\n    return (\r\n        <>\r\n            <TableContainer>\r\n                <Table\r\n                    sx={{ minWidth: 500 }}\r\n                    aria-labelledby=\"tableTitle\"\r\n                    size={'medium'}\r\n                >\r\n                    <EnhancedTableHead\r\n                        numSelected={selectedItem.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={props.onSortColumn}\r\n                        rowCount={rows.length}\r\n                        headCells={columns}\r\n                    />\r\n                    <TableBody>\r\n                        {/* if you don't need to support IE11, you can replace the `stableSort` call with:\r\n                 rows.slice().sort(getComparator(order, orderBy)) */}\r\n                        {\r\n                            renderTableRows()\r\n                        }\r\n                        {rows.length === 0 && (\r\n                            <TableRow>\r\n\r\n                                <TableCell colSpan={6} >\r\n                                    empty data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {totalItem > pageSize ?\r\n                < TablePagination\r\n                    totalItem={totalItem}\r\n                    count={numberPages}\r\n                    page={page}\r\n                    handleChangePage={handleChangePage}\r\n                /> : null}\r\n        </>\r\n\r\n\r\n    );\r\n}\r\nCapsitTable.propTypes = {\r\n\r\n    columns: PropTypes.array.isRequired,\r\n    rows: PropTypes.array.isRequired,\r\n    actions: PropTypes.array.isRequired,\r\n    onSortColumn: PropTypes.func.isRequired,\r\n    onSelectedItem: PropTypes.any,\r\n    selectedItem: PropTypes.array,\r\n    totalItem: PropTypes.number,\r\n    page: PropTypes.number,\r\n    pageSize: PropTypes.number,\r\n    onPageChange: PropTypes.func\r\n};"]},"metadata":{},"sourceType":"module"}