{"ast":null,"code":"var _jsxFileName = \"D:\\\\All - Projects\\\\PROJECTS - Gitkraken\\\\Project-9 - capsit\\\\capsit\\\\src\\\\pages\\\\auth\\\\newPassword\\\\NewPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@mui/material\";\nimport logo from \"../../../assets/logo.png\";\nimport * as actions from \"../../../store/action-creators/index\";\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport classes from \"./newPassword.module.scss\";\nimport { Formik, Form, Field } from \"formik\";\nimport { TextField } from \"formik-material-ui\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewPassword = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation([\"login\"]); //Data\n\n  const initialValues = {\n    password: \"\",\n    confirmPassword: \"\"\n  };\n  const [state, setState] = useState(initialValues);\n  const [Valide, setValide] = useState(null); //password validation\n\n  const lowercaseRegEx = /(?=.*[a-z])/;\n  const uppercaseRegEx = /(?=.*[A-Z])/;\n  const numericRegEx = /(?=.*[0-9])/;\n  const lengthRegEx = /(?=.{8,})/;\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\n  const p = document.querySelector(\"p\"); //validation schema\n\n  let validationSchema = Yup.object().shape({\n    password: Yup.string().min(8, \"Password is too short - should be 8 chars minimum.\").matches(lowercaseRegEx, \"Must contain one lowercase alphabetical character!\").matches(uppercaseRegEx, \"Must contain one uppercase alphabetical character!\").matches(numericRegEx, \"Must contain one numeric character!\").matches(lengthRegEx, \"Must contain at least 8 characters!\").matches(specialsRegEx, \"Must contain one special caracter\").required(\"Password is required\"),\n    confirmPassword: Yup.string().required(\"Confirm password is required\").oneOf([Yup.ref(\"password\")], \"Passwords does not match\")\n  });\n  let dispatch = useDispatch();\n  let navigate = useNavigate();\n\n  const onSubmit = async values => {\n    console.log(values, ' values');\n    const IsValide = await validationSchema.isValid(values);\n    console.log(\"IsValide\", IsValide);\n    dispatch(actions.newPassword(values, navigate));\n  }; // useEffect( async(values) => {\n  //   console.log('valuesa', values);\n  //   const IsValide = await validationSchema.isValid(values);\n  //   console.log(\"IsValide\", IsValide);\n  //   setValide(IsValide)\n  // }, [])\n  // console.log('Valide', Valide);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.newPass_login,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.newPass_container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.newPass_logo,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"logo\",\n          style: {\n            width: \"270px\",\n            height: \"152px\",\n            marginTop: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.newPass_form,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.newPass_title,\n          children: t(\"titleNewPassword\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.newPass_enter_Password,\n          children: t(\"textNewPassword\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.newPass_reset_Password,\n          children: t(\"textNewPasswordDetails\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: state,\n          validationSchema: validationSchema,\n          onSubmit: values => onSubmit(values),\n          children: formik => {\n            console.log('formik', formik);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewPassword, \"J2e2umOn5Bobi/oqpToVlKKAniU=\", false, function () {\n  return [useTranslation, useDispatch, useNavigate];\n});\n\n_c = NewPassword;\nexport default NewPassword; // const testedResult = validationSchema.password;\n// const createPasswordLabel = () => {\n//   let score = 0\n//   let regexPositive = [\"[A-Z]\",\"[a-z]\",\"[0-9]\",\"\\\\W\",]\n//   regexPositive.forEach((regex, index) => {\n//     if (new RegExp(regex).test(testedResult)) {\n//       score +=1\n//     }\n//   })\n//   switch (score) {\n//     case 0:\n//       return ({\n//         value: 0,\n//         info: \"\",\n//       });\n//     case 1:\n//       return ({\n//         value: 1,\n//         info: \"Weak\",\n//       });\n//     case 2:\n//       return ({\n//         value: 2,\n//         info: \"Fair\",\n//       });\n//     case 3:\n//       return ({\n//         value: 3,\n//         info: \"Good\",\n//       });\n//     case 4:\n//       return ({\n//         value: 4,\n//         info: \"Strong\",\n//       });\n//     default:\n//       return null\n//   }\n// }\n// const validate=(values)=>{\n// }\n// console.log('validationSchema', validationSchema);\n\n{\n  /* {({ values }) => {\r\n         console.log('values !!', values)\r\n       }} */\n}\n{\n  /* return (\r\n   <Form className=\"\" autoComplete=\"on\" style={{ margin: 40 }}>\r\n     <Field\r\n       className={classes.textField}\r\n       variant=\"standard\"\r\n       id=\"password\"\r\n       label={t(\"password\")}\r\n       name=\"password\"\r\n       value={values.password}\r\n       type=\"password\"\r\n       component={TextField}\r\n     />\r\n     <div className={classes.newPass_text_security}>\r\n       {values.password.length == 0\r\n         ? null\r\n         : t(\"securityOfPassword\")}\r\n         {values.password.length >= 8 && Valide ? (\r\n         <span style={{ color: \"green\" }}>Fort</span>\r\n       ) : values.password.length == 0 ? null : (\r\n         <span style={{ color: \"red\" }}>Faible</span>\r\n       )}\r\n     </div>\r\n     <Field\r\n       className={classes.textField}\r\n       variant=\"standard\"\r\n       id=\"confirmPassword\"\r\n       label={t(\"confirmPassword\")}\r\n       name=\"confirmPassword\"\r\n       value={values.confirmPassword}\r\n       type=\"password\"\r\n       component={TextField}\r\n     />\r\n     <br />\r\n     <Button\r\n       className={classes.newPass_button}\r\n       variant=\"outlined\"\r\n       type=\"submit\"\r\n     >\r\n       {t(\"register\")}\r\n     </Button>\r\n   </Form>\r\n  );\r\n  }} */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPassword\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-9 - capsit/capsit/src/pages/auth/newPassword/NewPassword.js"],"names":["React","useState","useEffect","Button","logo","actions","useDispatch","useTranslation","useNavigate","classes","Formik","Form","Field","TextField","Yup","NewPassword","t","initialValues","password","confirmPassword","state","setState","Valide","setValide","lowercaseRegEx","uppercaseRegEx","numericRegEx","lengthRegEx","specialsRegEx","p","document","querySelector","validationSchema","object","shape","string","min","matches","required","oneOf","ref","dispatch","navigate","onSubmit","values","console","log","IsValide","isValid","newPassword","newPass_login","newPass_container","newPass_logo","width","height","marginTop","newPass_form","newPass_title","newPass_enter_Password","newPass_reset_Password","formik"],"mappings":"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ACG1C,CAAC,CAAC,iBAAD;AADJ;AAAA;AAAA;AAAA;AAAA,gBAHF,eAME;AAAK,UAAA,SAAS,EAAEP,OAAO,CAACkD,sBAAxB;AAAA,oBACG3C,CAAC,CAAC,wBAAD;AADJ;AAAA;AAAA;AAAA;AAAA,gBANF,eASE,QAAC,MAAD;AACE,UAAA,aAAa,EAAEI,KADjB;AAEE,UAAA,gBAAgB,EAAEY,gBAFpB;AAGE,UAAA,QAAQ,EAAGY,MAAD,IAAYD,QAAQ,CAACC,MAAD,CAHhC;AAAA,oBAOIgB,MAAM,IAAG;AACPf,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBc,MAAtB;AACD;AATL;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CAnGD;;GAAM7C,W;UACUR,c,EA2CCD,W,EACAE,W;;;KA7CXO,W;AAqGN,eAAeA,WAAf,C,CAIA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AAII;AAAC;AACP;AACA;AAAkB;AACJ;AAAC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB","sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport logo from \"../../../assets/logo.png\";\r\nimport * as actions from \"../../../store/action-creators/index\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport classes from \"./newPassword.module.scss\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport * as Yup from \"yup\";\r\nconst NewPassword = () => {\r\n  const { t } = useTranslation([\"login\"]);\r\n\r\n  //Data\r\n  const initialValues = {\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  };\r\n\r\n  const [state, setState] = useState(initialValues);\r\nconst [Valide, setValide] = useState(null)\r\n  //password validation\r\n  const lowercaseRegEx = /(?=.*[a-z])/;\r\n  const uppercaseRegEx = /(?=.*[A-Z])/;\r\n  const numericRegEx = /(?=.*[0-9])/;\r\n  const lengthRegEx = /(?=.{8,})/;\r\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\r\n  const p = document.querySelector(\"p\");\r\n\r\n  //validation schema\r\n  let validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n      .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n\r\n      .matches(\r\n        lowercaseRegEx,\r\n        \"Must contain one lowercase alphabetical character!\"\r\n      )\r\n      .matches(\r\n        uppercaseRegEx,\r\n        \"Must contain one uppercase alphabetical character!\"\r\n      )\r\n      .matches(numericRegEx, \"Must contain one numeric character!\")\r\n      .matches(lengthRegEx, \"Must contain at least 8 characters!\")\r\n      .matches(specialsRegEx, \"Must contain one special caracter\")\r\n      .required(\"Password is required\"),\r\n\r\n    confirmPassword: Yup.string()\r\n      .required(\"Confirm password is required\")\r\n      .oneOf([Yup.ref(\"password\")], \"Passwords does not match\"),\r\n  });\r\n\r\n  \r\n\r\n  let dispatch = useDispatch();\r\n  let navigate = useNavigate();\r\n  const onSubmit = async (values) => {\r\n    console.log(values,' values')\r\n    const IsValide = await validationSchema.isValid(values);\r\n    console.log(\"IsValide\", IsValide);\r\n\r\n    dispatch(actions.newPassword(values, navigate));\r\n  };\r\n  \r\n  // useEffect( async(values) => {\r\n  //   console.log('valuesa', values);\r\n  //   const IsValide = await validationSchema.isValid(values);\r\n  //   console.log(\"IsValide\", IsValide);\r\n  //   setValide(IsValide)\r\n    \r\n  // }, [])\r\n\r\n  // console.log('Valide', Valide);\r\n  return (\r\n    <div className={classes.newPass_login}>\r\n      <div className={classes.newPass_container}>\r\n        <div className={classes.newPass_logo}>\r\n          <img\r\n            src={logo}\r\n            alt=\"logo\"\r\n            style={{ width: \"270px\", height: \"152px\", marginTop: \"5px\" }}\r\n          />\r\n        </div>\r\n        <div className={classes.newPass_form}>\r\n          <div className={classes.newPass_title}>{t(\"titleNewPassword\")}</div>\r\n\r\n          <div className={classes.newPass_enter_Password}>\r\n            {t(\"textNewPassword\")}\r\n          </div>\r\n          <div className={classes.newPass_reset_Password}>\r\n            {t(\"textNewPasswordDetails\")}\r\n          </div>\r\n          <Formik\r\n            initialValues={state}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values) => onSubmit(values)}\r\n          >\r\n\r\n            {\r\n              formik =>{\r\n                console.log('formik', formik);\r\n              }\r\n            }\r\n        \r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPassword;\r\n\r\n\r\n\r\n// const testedResult = validationSchema.password;\r\n  // const createPasswordLabel = () => {\r\n  //   let score = 0\r\n  //   let regexPositive = [\"[A-Z]\",\"[a-z]\",\"[0-9]\",\"\\\\W\",]\r\n  //   regexPositive.forEach((regex, index) => {\r\n  //     if (new RegExp(regex).test(testedResult)) {\r\n  //       score +=1\r\n  //     }\r\n  //   })\r\n  //   switch (score) {\r\n  //     case 0:\r\n  //       return ({\r\n  //         value: 0,\r\n  //         info: \"\",\r\n  //       });\r\n  //     case 1:\r\n  //       return ({\r\n  //         value: 1,\r\n  //         info: \"Weak\",\r\n  //       });\r\n  //     case 2:\r\n  //       return ({\r\n  //         value: 2,\r\n  //         info: \"Fair\",\r\n  //       });\r\n  //     case 3:\r\n  //       return ({\r\n  //         value: 3,\r\n  //         info: \"Good\",\r\n  //       });\r\n  //     case 4:\r\n  //       return ({\r\n  //         value: 4,\r\n  //         info: \"Strong\",\r\n  //       });\r\n  //     default:\r\n  //       return null\r\n  //   }\r\n\r\n  // }\r\n\r\n  // const validate=(values)=>{\r\n\r\n  // }\r\n  // console.log('validationSchema', validationSchema);\r\n\r\n\r\n\r\n      {/* {({ values }) => {\r\n              console.log('values !!', values)\r\n            }} */}\r\n              {/* return (\r\n                <Form className=\"\" autoComplete=\"on\" style={{ margin: 40 }}>\r\n                  <Field\r\n                    className={classes.textField}\r\n                    variant=\"standard\"\r\n                    id=\"password\"\r\n                    label={t(\"password\")}\r\n                    name=\"password\"\r\n                    value={values.password}\r\n                    type=\"password\"\r\n                    component={TextField}\r\n                  />\r\n                  <div className={classes.newPass_text_security}>\r\n                    {values.password.length == 0\r\n                      ? null\r\n                      : t(\"securityOfPassword\")}\r\n\r\n                    {values.password.length >= 8 && Valide ? (\r\n                      <span style={{ color: \"green\" }}>Fort</span>\r\n                    ) : values.password.length == 0 ? null : (\r\n                      <span style={{ color: \"red\" }}>Faible</span>\r\n                    )}\r\n                  </div>\r\n                  <Field\r\n                    className={classes.textField}\r\n                    variant=\"standard\"\r\n                    id=\"confirmPassword\"\r\n                    label={t(\"confirmPassword\")}\r\n                    name=\"confirmPassword\"\r\n                    value={values.confirmPassword}\r\n                    type=\"password\"\r\n                    component={TextField}\r\n                  />\r\n                  <br />\r\n                  <Button\r\n                    className={classes.newPass_button}\r\n                    variant=\"outlined\"\r\n                    type=\"submit\"\r\n                  >\r\n                    {t(\"register\")}\r\n                  </Button>\r\n                </Form>\r\n              );\r\n            }} */}"]},"metadata":{},"sourceType":"module"}