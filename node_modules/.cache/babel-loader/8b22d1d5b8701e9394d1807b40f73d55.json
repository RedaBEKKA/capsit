{"ast":null,"code":"import * as actionTypes from './action-types';\nimport axios from 'axios';\nimport { storageSetItem, storageGetItem, storageRemoveItem } from '../../services/Storage';\nimport i18n from 'i18next';\nimport { openSnackBar } from './snackbar';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (user, token, role) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    user,\n    token,\n    role\n  };\n};\nexport const authFail = err => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: err\n  };\n};\nexport const logout = () => {\n  storageRemoveItem('acces_token');\n  storageRemoveItem('user');\n  storageRemoveItem('user_role');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const forgotSuccess = email => {\n  return {\n    type: actionTypes.FORGOT_PASSWORD,\n    email: email\n  };\n};\nexport const newPassSuccess = (key, password, confirmPassword) => {\n  return {\n    type: actionTypes.NEW_PASSWORD,\n    key: key,\n    password: password,\n    confirmPassword: confirmPassword\n  };\n};\nexport const auth = identifiant => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('https://run.mocky.io/v3/04564e78-f928-4f1c-ab05-31661d842b07', {\n      identifiant\n    }).then(res => {\n      console.log(res);\n      const {\n        token,\n        user\n      } = res.data;\n      storageSetItem('access_token', token);\n      storageSetItem('user', user);\n      storageSetItem('user_role', user.type);\n      dispatch(authSuccess(user, token, user.type));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = storageGetItem('access_token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const user = storageGetItem('user');\n      const role = storageGetItem('user_role');\n      dispatch(authSuccess(user, token, role));\n    }\n  };\n};\nexport const forgotPassword = email => {\n  return dispatch => {\n    axios.post('https://run.mocky.io/v3/3e7f9bc9-5372-4dd6-b113-f9b6b7efee03', email).then(res => {\n      console.log('res', res.data);\n      dispatch(openSnackBar(i18n.t('snackbarSuccess', {\n        ns: 'login'\n      }), 'success')); //navigate('/new_password')\n      //dispatch(forgotSuccess(key))\n    });\n  };\n};\nexport const newPassword = (password, confirmPassword, navigate) => {\n  return dispatch => {\n    axios.post('https://run.mocky.io/v3/22dfe59b-6ac0-4a70-a8fd-895a026f5bd9', password, confirmPassword).then(res => {\n      console.log('res', res.data);\n      const {\n        key,\n        password,\n        confirmPassword\n      } = res.data.user;\n      navigate('/');\n      dispatch(newPassSuccess(key, password, confirmPassword));\n    });\n  };\n};","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-9 - capsit/capsit/src/store/action-creators/auth.js"],"names":["actionTypes","axios","storageSetItem","storageGetItem","storageRemoveItem","i18n","openSnackBar","authStart","type","AUTH_START","authSuccess","user","token","role","AUTH_SUCCESS","authFail","err","AUTH_FAIL","error","logout","AUTH_LOGOUT","forgotSuccess","email","FORGOT_PASSWORD","newPassSuccess","key","password","confirmPassword","NEW_PASSWORD","auth","identifiant","dispatch","post","then","res","console","log","data","catch","authCheckState","forgotPassword","t","ns","newPassword","navigate"],"mappings":"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","sourcesContent":["import * as actionTypes from './action-types'\r\nimport axios from 'axios'\r\nimport { storageSetItem, storageGetItem, storageRemoveItem, } from '../../services/Storage'\r\nimport i18n from 'i18next';\r\nimport {openSnackBar} from './snackbar'\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    }\r\n}\r\n\r\nexport const authSuccess = (user, token, role) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        user,\r\n        token,\r\n        role\r\n    }\r\n}\r\nexport const authFail = (err) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: err\r\n    }\r\n}\r\nexport const logout = () => {\r\n    storageRemoveItem('acces_token');\r\n    storageRemoveItem('user');\r\n    storageRemoveItem('user_role');\r\n\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n\r\n    }\r\n}\r\n\r\nexport const forgotSuccess = (email) => {\r\n    return {\r\n        type: actionTypes.FORGOT_PASSWORD,\r\n        email: email\r\n    }\r\n}\r\n\r\nexport const newPassSuccess = (key, password, confirmPassword) => {\r\n    return {\r\n        type: actionTypes.NEW_PASSWORD,\r\n        key: key,\r\n        password: password,\r\n        confirmPassword: confirmPassword\r\n    }\r\n}\r\n\r\n\r\nexport const auth = (identifiant) => {\r\n    return dispatch => {\r\n        dispatch(authStart())\r\n        axios.post('https://run.mocky.io/v3/04564e78-f928-4f1c-ab05-31661d842b07', { identifiant })\r\n            .then(res => {\r\n                console.log(res)\r\n                const { token, user } = res.data\r\n                storageSetItem('access_token', token)\r\n                storageSetItem('user', user)\r\n                storageSetItem('user_role', user.type)\r\n                dispatch(authSuccess(user, token, user.type))\r\n            })\r\n            .catch(err => {\r\n                dispatch(authFail(err))\r\n                \r\n            })\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = storageGetItem('access_token')\r\n        if (!token) {\r\n            dispatch(logout());\r\n        } else {\r\n\r\n            const user = storageGetItem('user');\r\n            const role = storageGetItem('user_role');\r\n            dispatch(authSuccess(user, token, role));\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const forgotPassword = (email) => {\r\n    return dispatch => {\r\n\r\n\r\n        axios.post('https://run.mocky.io/v3/3e7f9bc9-5372-4dd6-b113-f9b6b7efee03', email)\r\n            .then(res => {\r\n                console.log('res', res.data)\r\n                dispatch(openSnackBar(i18n.t('snackbarSuccess', { ns: 'login'}), 'success'));\r\n                //navigate('/new_password')\r\n\r\n                //dispatch(forgotSuccess(key))\r\n             \r\n\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const newPassword = (password, confirmPassword, navigate) => {\r\n    return dispatch => {\r\n\r\n\r\n        axios.post('https://run.mocky.io/v3/22dfe59b-6ac0-4a70-a8fd-895a026f5bd9', password, confirmPassword)\r\n            .then(res => {\r\n                console.log('res', res.data)\r\n                const { key, password, confirmPassword } = res.data.user\r\n\r\n                navigate('/')\r\n\r\n                dispatch(newPassSuccess(key, password, confirmPassword))\r\n\r\n\r\n            })\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}