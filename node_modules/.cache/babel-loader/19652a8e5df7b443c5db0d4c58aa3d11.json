{"ast":null,"code":"var _jsxFileName = \"D:\\\\All - Projects\\\\PROJECTS - Gitkraken\\\\Project-9 - capsit\\\\capsit\\\\src\\\\pages\\\\auth\\\\login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { Link } from \"react-router-dom\"; // import ImageConnexion from \"../../../assets/ImageConnexion.png\";\n\nimport logo from \"../../../assets/logo.png\";\nimport classes from './login.module.scss';\nimport * as actions from '../../../store/action-creators/index';\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { Formik, Form, Field } from \"formik\";\nimport { TextField } from \"formik-material-ui\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation(['login']);\n  let dispatch = useDispatch(); //Data\n\n  const initialValues = {\n    email: \"\",\n    password: \"\"\n  };\n  const [state, setState] = useState(initialValues); //password validation\n\n  const lowercaseRegEx = /(?=.*[a-z])/;\n  const uppercaseRegEx = /(?=.*[A-Z])/;\n  const numericRegEx = /(?=.*[0-9])/;\n  const lengthRegEx = /(?=.{8,})/;\n  const specialsRegEx = /[^A-Za-z 0-9]/g; //validation schema\n\n  let validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n    password: Yup.string().matches(lowercaseRegEx, \"Must contain one lowercase alphabetical character!\").matches(uppercaseRegEx, \"Must contain one uppercase alphabetical character!\").matches(numericRegEx, \"Must contain one numeric character!\").matches(lengthRegEx, \"Must contain at least 8 characters!\").matches(specialsRegEx, \"Must contain one special caracter\").required(\"Password is required\")\n  });\n\n  const onSubmit = values => {\n    // console.log(values,' values')\n    dispatch(actions.auth(values));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.login_container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: classes.login_image,\n          src: logo,\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.login_form,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.login_title,\n          children: t('title')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: state,\n          validationSchema: validationSchema,\n          onSubmit: values => onSubmit(values),\n          children: _ref => {\n            let {\n              values\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              autoComplete: \"on\",\n              style: {\n                margin: 40\n              },\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                className: classes.textField,\n                variant: \"standard\",\n                id: \"email\",\n                label: t('email'),\n                name: \"email\",\n                value: values.email,\n                type: \"email\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: classes.textField,\n                variant: \"standard\",\n                id: \"password\",\n                label: t('password'),\n                name: \"password\",\n                value: values.password,\n                type: \"password\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/forgot_password\",\n                className: classes.login_link_forgot_password,\n                children: t('forgotPassword')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                className: classes.button_login,\n                type: \"submit\",\n                children: t('signin')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.login_compte,\n                children: [t('account'), /*#__PURE__*/_jsxDEV(Link, {\n                  to: \"/register\",\n                  className: classes.login_link_signup,\n                  children: t('signup')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 11\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"qDH2Thp5b4L6or0LGb6MKfrRygM=\", false, function () {\n  return [useTranslation, useDispatch];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-9 - capsit/capsit/src/pages/auth/login/Login.js"],"names":["React","useState","Button","Link","logo","classes","actions","useDispatch","useTranslation","Formik","Form","Field","TextField","Yup","Login","t","dispatch","initialValues","email","password","state","setState","lowercaseRegEx","uppercaseRegEx","numericRegEx","lengthRegEx","specialsRegEx","validationSchema","object","shape","string","required","matches","onSubmit","values","auth","login","login_container","login_image","login_form","login_title","margin","textField","login_link_forgot_password","button_login","login_compte","login_link_signup"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button} from \"@mui/material\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// import ImageConnexion from \"../../../assets/ImageConnexion.png\";\r\nimport logo from \"../../../assets/logo.png\";\r\nimport classes from './login.module.scss';\r\n\r\nimport * as actions from '../../../store/action-creators/index';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Formik,Form, Field} from \"formik\";\r\nimport { TextField } from \"formik-material-ui\"\r\nimport * as Yup from \"yup\"\r\n\r\nconst Login = () => {\r\n  const { t } = useTranslation(['login'])\r\n  let dispatch = useDispatch()\r\n \r\n  //Data\r\n  const initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n    \r\n  }\r\n\r\n  const [state, setState] = useState(initialValues);\r\n  \r\n  //password validation\r\n  const lowercaseRegEx = /(?=.*[a-z])/\r\n  const uppercaseRegEx = /(?=.*[A-Z])/\r\n  const numericRegEx = /(?=.*[0-9])/\r\n  const lengthRegEx = /(?=.{8,})/\r\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\r\n  //validation schema\r\n  let validationSchema = Yup.object().shape({\r\n    email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\r\n    password: Yup.string()\r\n      .matches(\r\n        lowercaseRegEx,\r\n        \"Must contain one lowercase alphabetical character!\"\r\n      )\r\n      .matches(\r\n        uppercaseRegEx,\r\n        \"Must contain one uppercase alphabetical character!\"\r\n      )\r\n      .matches(numericRegEx, \"Must contain one numeric character!\")\r\n      .matches(lengthRegEx, \"Must contain at least 8 characters!\")\r\n      .matches(specialsRegEx,\"Must contain one special caracter\")\r\n      .required(\"Password is required\"),\r\n  })\r\n\r\n  const onSubmit = (values) => {\r\n      // console.log(values,' values')\r\n      dispatch(actions.auth(values))\r\n   }\r\n   \r\n    \r\n  return (\r\n    <div className={classes.login}>\r\n\r\n      <div className={classes.login_container}>\r\n        <div>\r\n          <img \r\n            className={classes.login_image}\r\n            src={logo}\r\n            alt=\"logo\"\r\n            \r\n          />\r\n        </div>\r\n         <div\r\n          className={classes.login_form}\r\n        >\r\n        \r\n          <div\r\n            className={classes.login_title}\r\n          >\r\n            {t('title')}\r\n          </div>\r\n          <Formik \r\n            initialValues={state}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values) =>onSubmit(values)}\r\n          >\r\n          {({ values}) => {\r\n            \r\n          return (\r\n          <Form  autoComplete=\"on\" style={{ margin: 40 }}>\r\n            <Field\r\n              className={classes.textField}\r\n              variant=\"standard\"\r\n              id=\"email\"\r\n              label={t('email')}\r\n              name=\"email\"\r\n              value={values.email}\r\n              type=\"email\"\r\n              component={TextField}\r\n              />\r\n            <br />\r\n            <Field\r\n              className={classes.textField}\r\n              variant=\"standard\"\r\n              id=\"password\"\r\n              label={t('password')}\r\n              name=\"password\"\r\n              value={values.password}\r\n              type=\"password\"\r\n              component={TextField}\r\n              \r\n            />\r\n            <br />\r\n\r\n            <Link\r\n              to=\"/forgot_password\"\r\n              className={classes.login_link_forgot_password}\r\n            >\r\n              {t('forgotPassword')}\r\n            </Link>\r\n            <br />\r\n            <Button \r\n              variant=\"outlined\"\r\n              className={classes.button_login}\r\n              type=\"submit\"\r\n              >\r\n              {t('signin')}\r\n            </Button>\r\n            <br />\r\n            <div\r\n              className={classes.login_compte}\r\n            >\r\n              {t('account')}\r\n              <Link\r\n                to=\"/register\"\r\n                className={classes.login_link_signup}\r\n               \r\n              >\r\n                {t('signup')}\r\n              </Link>\r\n            </div>\r\n\r\n            \r\n          </Form>\r\n          )\r\n          }}\r\n          </Formik>\r\n        </div> \r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}