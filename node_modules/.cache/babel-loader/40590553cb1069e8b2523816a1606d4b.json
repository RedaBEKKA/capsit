{"ast":null,"code":"import * as actionsType from '../action-creators/action-types';\nimport { updateObject } from '../../services/utility';\nconst initialState = {\n  token: null,\n  user: null,\n  type: null,\n  error: null,\n  loading: false\n};\n\nconst authStart = (state, action) => {\n  return updateObject(state, {\n    loading: true,\n    error: null\n  });\n};\n\nconst authSuccess = (state, action) => {\n  return updateObject(state, {\n    user: action.user,\n    token: action.token,\n    type: action.role,\n    loading: false,\n    error: null\n  });\n};\n\nconst authFail = (state, action) => {\n  return updateObject(state, {\n    loading: false,\n    error: action.error\n  });\n};\n\nconst authLogout = (state, action) => {\n  return updateObject(state, {\n    user: null,\n    token: null,\n    type: null\n  });\n};\n\nconst forgotSuccess = (state, action) => {\n  return updateObject(state);\n};\n\nconst newPassSuccess = (state, action) => {\n  return updateObject(state, {\n    key: action.key,\n    password: action.password,\n    confirmPassword: action.confirmPassword,\n    loading: false,\n    error: null\n  });\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionsType.AUTH_START:\n      return authStart(state, action);\n\n    case actionsType.AUTH_SUCCESS:\n      return authSuccess(state, action);\n\n    case actionsType.AUTH_FAIL:\n      return authFail(state, action);\n\n    case actionsType.AUTH_LOGOUT:\n      return authLogout(state, action);\n\n    case actionsType.FORGOT_PASSWORD:\n      return forgotSuccess(state, action);\n\n    case actionsType.NEW_PASSWORD:\n      return newPassSuccess(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-9 - capsit/capsit/src/store/reducers/auth.js"],"names":["actionsType","updateObject","initialState","token","user","type","error","loading","authStart","state","action","authSuccess","role","authFail","authLogout","forgotSuccess","newPassSuccess","key","password","confirmPassword","reducer","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","FORGOT_PASSWORD","NEW_PASSWORD"],"mappings":"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","sourcesContent":["import * as actionsType from '../action-creators/action-types'\r\nimport { updateObject } from '../../services/utility'\r\n\r\n\r\nconst initialState = {\r\n    token: null,\r\n    user: null,\r\n    type: null,\r\n    error: null,\r\n    loading: false,\r\n  \r\n}\r\n\r\nconst authStart = (state, action) => {\r\n    return updateObject(state, {\r\n        loading: true,\r\n        error: null\r\n    })\r\n}\r\nconst authSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        user: action.user,\r\n        token: action.token,\r\n        type: action.role,\r\n        loading: false,\r\n        error: null\r\n    })\r\n}\r\nconst authFail = (state, action) => {\r\n    return updateObject(state, {\r\n        loading: false,\r\n        error: action.error\r\n    })\r\n}\r\nconst authLogout = (state, action) => {\r\n    return updateObject(state, { user: null, token: null, type: null });\r\n};\r\nconst forgotSuccess = (state, action) => {\r\n    return updateObject(state)\r\n}\r\n\r\nconst newPassSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        key: action.key,\r\n        password: action.password,\r\n        confirmPassword: action.confirmPassword,\r\n        loading: false,\r\n        error: null\r\n    })\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionsType.AUTH_START: return authStart(state, action)\r\n        case actionsType.AUTH_SUCCESS: return authSuccess(state, action)\r\n        case actionsType.AUTH_FAIL: return authFail(state, action)\r\n        case actionsType.AUTH_LOGOUT: return authLogout(state, action)\r\n        case actionsType.FORGOT_PASSWORD: return forgotSuccess(state, action)\r\n        case actionsType.NEW_PASSWORD: return newPassSuccess(state, action)\r\n        default: return state\r\n    }\r\n}\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}