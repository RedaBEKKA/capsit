{"ast":null,"code":"var _jsxFileName = \"D:\\\\All - Projects\\\\PROJECTS - Gitkraken\\\\Project-9 - capsit\\\\capsit\\\\src\\\\pages\\\\auth\\\\newPassword\\\\NewPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@mui/material\";\nimport logo from \"../../../assets/logo.png\";\nimport * as actions from \"../../../store/action-creators/index\";\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport classes from \"./newPassword.module.scss\";\nimport { Formik, Form, Field } from \"formik\";\nimport { TextField } from \"formik-material-ui\";\nimport * as Yup from \"yup\";\nimport { useStyles } from \"./Styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewPassword = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation([\"login\"]); //Data\n\n  const initialValues = {\n    password: \"\",\n    confirmPassword: \"\"\n  };\n  const [state, setState] = useState(initialValues);\n  const [Valide, setValide] = useState(null); //password validation\n\n  const lowercaseRegEx = /(?=.*[a-z])/;\n  const uppercaseRegEx = /(?=.*[A-Z])/;\n  const numericRegEx = /(?=.*[0-9])/;\n  const lengthRegEx = /(?=.{8,})/;\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\n  const p = document.querySelector(\"p\"); //validation schema\n\n  let validationSchema = Yup.object().shape({\n    password: Yup.string().min(8, \"Password is too short - should be 8 chars minimum.\").matches(lowercaseRegEx, \"Must contain one lowercase alphabetical character!\").matches(uppercaseRegEx, \"Must contain one uppercase alphabetical character!\").matches(numericRegEx, \"Must contain one numeric character!\").matches(lengthRegEx, \"Must contain at least 8 characters!\").matches(specialsRegEx, \"Must contain one special caracter\").required(\"Password is required\"),\n    confirmPassword: Yup.string().required(\"Confirm password is required\").oneOf([Yup.ref(\"password\")], \"Passwords does not match\")\n  });\n  const classess = useStyles();\n  let dispatch = useDispatch();\n  let navigate = useNavigate();\n\n  const onSubmit = async values => {\n    console.log(values, \" values\");\n    dispatch(actions.newPassword(values, navigate));\n  }; // useEffect( async(values) => {\n  //   console.log('valuesa', values);\n  //   const IsValide = await validationSchema.isValid(values);\n  //   console.log(\"IsValide\", IsValide);\n  //   setValide(IsValide)\n  // }, [])\n  // console.log('Valide', Valide);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.newPass_login,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.newPass_container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.newPass_logo,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"logo\",\n          style: {\n            width: \"270px\",\n            height: \"152px\",\n            marginTop: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.newPass_form,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.newPass_title,\n          children: t(\"titleNewPassword\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.newPass_enter_Password,\n          children: t(\"textNewPassword\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.newPass_reset_Password,\n          children: t(\"textNewPasswordDetails\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: state,\n          validationSchema: validationSchema,\n          onSubmit: values => onSubmit(values),\n          children: formik => {\n            console.log(\"isValid !!\", formik);\n            return /*#__PURE__*/_jsxDEV(Form, {\n              className: \"\",\n              autoComplete: \"on\",\n              style: {\n                margin: 40\n              },\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                className: classes.textField,\n                variant: \"standard\",\n                id: \"password\",\n                label: t(\"password\"),\n                name: \"password\",\n                value: formik.values.password,\n                type: \"password\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.newPass_text_security,\n                children: [formik.errors.length >= 0 && t(\"securityOfPassword\"), !formik.isValid && formik.errors.password ? t(\"securityOfPassword\") : formik.values.password && t(\"securityOfPassword\"), !formik.errors.length == 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"green\"\n                  },\n                  children: \"Fort\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 23\n                }, this), !formik.isValid && formik.errors.password ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"red\"\n                  },\n                  children: \"Faible\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 23\n                }, this) : formik.values.password && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"green\"\n                  },\n                  children: \"Fort\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 48\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: classes.textField,\n                variant: \"standard\",\n                id: \"confirmPassword\",\n                label: t(\"confirmPassword\"),\n                name: \"confirmPassword\",\n                value: formik.values.confirmPassword,\n                type: \"password\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button // className={classes.newPass_button}\n              , {\n                className: classess.Btn,\n                variant: \"outlined\",\n                type: \"submit\",\n                children: t(\"register\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewPassword, \"gTJkz9UFakM9jT+n8OTkxWyKhF0=\", false, function () {\n  return [useTranslation, useStyles, useDispatch, useNavigate];\n});\n\n_c = NewPassword;\nexport default NewPassword; // const testedResult = validationSchema.password;\n// const createPasswordLabel = () => {\n//   let score = 0\n//   let regexPositive = [\"[A-Z]\",\"[a-z]\",\"[0-9]\",\"\\\\W\",]\n//   regexPositive.forEach((regex, index) => {\n//     if (new RegExp(regex).test(testedResult)) {\n//       score +=1\n//     }\n//   })\n//   switch (score) {\n//     case 0:\n//       return ({\n//         value: 0,\n//         info: \"\",\n//       });\n//     case 1:\n//       return ({\n//         value: 1,\n//         info: \"Weak\",\n//       });\n//     case 2:\n//       return ({\n//         value: 2,\n//         info: \"Fair\",\n//       });\n//     case 3:\n//       return ({\n//         value: 3,\n//         info: \"Good\",\n//       });\n//     case 4:\n//       return ({\n//         value: 4,\n//         info: \"Strong\",\n//       });\n//     default:\n//       return null\n//   }\n// }\n// const validate=(values)=>{\n// }\n// console.log('validationSchema', validationSchema);\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPassword\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-9 - capsit/capsit/src/pages/auth/newPassword/NewPassword.js"],"names":["React","useState","useEffect","Button","logo","actions","useDispatch","useTranslation","useNavigate","classes","Formik","Form","Field","TextField","Yup","useStyles","NewPassword","t","initialValues","password","confirmPassword","state","setState","Valide","setValide","lowercaseRegEx","uppercaseRegEx","numericRegEx","lengthRegEx","specialsRegEx","p","document","querySelector","validationSchema","object","shape","string","min","matches","required","oneOf","ref","classess","dispatch","navigate","onSubmit","values","console","log","newPassword","newPass_login","newPass_container","newPass_logo","width","height","marginTop","newPass_form","newPass_title","newPass_enter_Password","newPass_reset_Password","formik","margin","textField","newPass_text_security","errors","length","isValid","color","Btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport logo from \"../../../assets/logo.png\";\r\nimport * as actions from \"../../../store/action-creators/index\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport classes from \"./newPassword.module.scss\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport * as Yup from \"yup\";\r\nimport { useStyles } from \"./Styles\";\r\nconst NewPassword = () => {\r\n  const { t } = useTranslation([\"login\"]);\r\n\r\n  //Data\r\n  const initialValues = {\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  };\r\n\r\n  const [state, setState] = useState(initialValues);\r\n  const [Valide, setValide] = useState(null);\r\n  //password validation\r\n  const lowercaseRegEx = /(?=.*[a-z])/;\r\n  const uppercaseRegEx = /(?=.*[A-Z])/;\r\n  const numericRegEx = /(?=.*[0-9])/;\r\n  const lengthRegEx = /(?=.{8,})/;\r\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\r\n  const p = document.querySelector(\"p\");\r\n\r\n  //validation schema\r\n  let validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n      .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n\r\n      .matches(\r\n        lowercaseRegEx,\r\n        \"Must contain one lowercase alphabetical character!\"\r\n      )\r\n      .matches(\r\n        uppercaseRegEx,\r\n        \"Must contain one uppercase alphabetical character!\"\r\n      )\r\n      .matches(numericRegEx, \"Must contain one numeric character!\")\r\n      .matches(lengthRegEx, \"Must contain at least 8 characters!\")\r\n      .matches(specialsRegEx, \"Must contain one special caracter\")\r\n      .required(\"Password is required\"),\r\n\r\n    confirmPassword: Yup.string()\r\n      .required(\"Confirm password is required\")\r\n      .oneOf([Yup.ref(\"password\")], \"Passwords does not match\"),\r\n  });\r\n const classess = useStyles();\r\n  let dispatch = useDispatch();\r\n  let navigate = useNavigate();\r\n  const onSubmit = async (values) => {\r\n    console.log(values, \" values\");\r\n    dispatch(actions.newPassword(values, navigate));\r\n  };\r\n\r\n  // useEffect( async(values) => {\r\n  //   console.log('valuesa', values);\r\n  //   const IsValide = await validationSchema.isValid(values);\r\n  //   console.log(\"IsValide\", IsValide);\r\n  //   setValide(IsValide)\r\n\r\n  // }, [])\r\n\r\n  // console.log('Valide', Valide);\r\n  return (\r\n    <div className={classes.newPass_login}>\r\n      <div className={classes.newPass_container}>\r\n        <div className={classes.newPass_logo}>\r\n          <img\r\n            src={logo}\r\n            alt=\"logo\"\r\n            style={{ width: \"270px\", height: \"152px\", marginTop: \"5px\" }}\r\n          />\r\n        </div>\r\n        <div className={classes.newPass_form}>\r\n          <div className={classes.newPass_title}>{t(\"titleNewPassword\")}</div>\r\n\r\n          <div className={classes.newPass_enter_Password}>\r\n            {t(\"textNewPassword\")}\r\n          </div>\r\n          <div className={classes.newPass_reset_Password}>\r\n            {t(\"textNewPasswordDetails\")}\r\n          </div>\r\n          <Formik\r\n            initialValues={state}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values) => onSubmit(values)}\r\n          >\r\n            {(formik) => {\r\n              console.log(\"isValid !!\", formik);\r\n              return (\r\n                <Form className=\"\" autoComplete=\"on\" style={{ margin: 40 }}>\r\n                  <Field\r\n                    className={classes.textField}\r\n                    variant=\"standard\"\r\n                    id=\"password\"\r\n                    label={t(\"password\")}\r\n                    name=\"password\"\r\n                    value={formik.values.password}\r\n                    type=\"password\"\r\n                    component={TextField}\r\n                  />\r\n                  <div className={classes.newPass_text_security}>\r\n                    {formik.errors.length >= 0 && t(\"securityOfPassword\")}\r\n\r\n                    {!formik.isValid &&\r\n                      formik.errors.password ?\r\n                      t(\"securityOfPassword\") : formik.values.password&&t(\"securityOfPassword\")\r\n                    }\r\n\r\n                    {/* {formik.isValid && formik.errors && t(\"securityOfPassword\")} */}\r\n\r\n                    {!formik.errors.length == 0 && (\r\n                      <span style={{ color: \"green\" }}>Fort</span>\r\n                    )}\r\n                    {/* {formik.isValid  && (\r\n                      <span style={{ color: \"green\" }}>Fort</span>\r\n                    )} */}\r\n\r\n                    {!formik.isValid && formik.errors.password ? (\r\n                      <span style={{ color: \"red\" }}>Faible</span>\r\n                    ) : (\r\n                      formik.values.password&& <span style={{ color: \"green\" }}>Fort</span>\r\n                    )}\r\n                  </div>\r\n                  <Field\r\n                    className={classes.textField}\r\n                    variant=\"standard\"\r\n                    id=\"confirmPassword\"\r\n                    label={t(\"confirmPassword\")}\r\n                    name=\"confirmPassword\"\r\n                    value={formik.values.confirmPassword}\r\n                    type=\"password\"\r\n                    component={TextField}\r\n                  />\r\n                  <br />\r\n                  <Button\r\n                    // className={classes.newPass_button}\r\n                    className={classess.Btn}\r\n                    variant=\"outlined\"\r\n                    type=\"submit\"\r\n                  >\r\n                    {t(\"register\")}\r\n                  </Button>\r\n                </Form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPassword;\r\n\r\n// const testedResult = validationSchema.password;\r\n// const createPasswordLabel = () => {\r\n//   let score = 0\r\n//   let regexPositive = [\"[A-Z]\",\"[a-z]\",\"[0-9]\",\"\\\\W\",]\r\n//   regexPositive.forEach((regex, index) => {\r\n//     if (new RegExp(regex).test(testedResult)) {\r\n//       score +=1\r\n//     }\r\n//   })\r\n//   switch (score) {\r\n//     case 0:\r\n//       return ({\r\n//         value: 0,\r\n//         info: \"\",\r\n//       });\r\n//     case 1:\r\n//       return ({\r\n//         value: 1,\r\n//         info: \"Weak\",\r\n//       });\r\n//     case 2:\r\n//       return ({\r\n//         value: 2,\r\n//         info: \"Fair\",\r\n//       });\r\n//     case 3:\r\n//       return ({\r\n//         value: 3,\r\n//         info: \"Good\",\r\n//       });\r\n//     case 4:\r\n//       return ({\r\n//         value: 4,\r\n//         info: \"Strong\",\r\n//       });\r\n//     default:\r\n//       return null\r\n//   }\r\n\r\n// }\r\n\r\n// const validate=(values)=>{\r\n\r\n// }\r\n// console.log('validationSchema', validationSchema);\r\n"]},"metadata":{},"sourceType":"module"}